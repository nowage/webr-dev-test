
############ 산점도 자동 플로팅 수정필요

if (interactive()){
  
  ### 패키지 호출
  library(shiny)
  library(moonBook)
  
  ### ui
  ui <- fluidPage(
    titlePanel("Multiple Regression Analysis"),
    
    sidebarLayout(
      # 사이드바 패널
      sidebarPanel(
        radioButtons("dataset", h5("Select data"), choices = c("mtcars","iris","acs","radial")),
        uiOutput('dv'),  # dependent variable(종속변수)
        uiOutput('iv'),  # independent variable(독립변수)
        actionButton("analysis", "Analysis")   # 실행버튼
      ),
      
      # 메인 패널
      mainPanel(
        checkboxInput("check", "show data.table", F),
        conditionalPanel(condition = "check == T", tableOutput("view") ),  # 체크 시 데이터시트 출력
        verbatimTextOutput("modelsummary"),
        uiOutput("plots")
      )
    )
  )
  
  
  ### server
  server <-  shinyServer(function(input, output) {
    
    # 데이터셋
    datasetInput <- reactive({
      datasetInput=eval(parse(text=input$dataset))
    })
    # 종속변수
    output$dv <- renderUI({
      selectInput("dv", h5("Response Variable(종속변수)"), choices = names(datasetInput()))
    })
    # 독립변수
    output$iv <- renderUI({
      selectInput("iv", h5("Explanatory Variable(s)(독립변수)"), choices = names(datasetInput()),multiple=T)   # 다중선택 기능
    })
  
    # 데이터시트 출력
    output$view <- renderTable({
      if(input$check == T){head(datasetInput())}
    })
    

    ## 회귀분석 수식
    # 단일회귀(산점도에 사용)
    regformula <-  reactive({
      result = NULL
      if(length(input$iv)>0){
        result <- paste(input$dv, '~', paste0(input$iv))
      }
    })
    # 다중회귀(분석에 사용)
    regFormula <- reactive({
      result = NULL
      if(length(input$iv)>0){
        result <- paste(input$dv, '~', paste(input$iv, collapse ='+'))
      }
    })
    
    # 통계량 요약표 출력
    observeEvent( input$analysis, {
      output$modelsummary <- renderPrint({
        regForm <- isolate(req(regFormula()))
        model <- isolate(eval(parse(text=paste0("lm(", regForm, ", data=", input$dataset, ")"))))
        summary(model)
      })
    })
      
    ## 산점도 출력
    
    observeEvent( input$analysis, {
      output$plots <- renderUI({
      ds= datasetInput()
      regform <- isolate(req(regformula()))
        
      for(i in 1:length(input$iv)){ # 독립변수의 개수만큼 반복
        local({j=i
        model <- isolate(eval(parse(text=paste0("lm(", input$dv, "~", input$iv[j], ", data=", input$dataset, ")"))))
        
        plotname <- paste0("plot", j)
        output[[plotname]] <- renderPlot({
          plot(ds[,input$iv[j]], ds[,input$dv], xlab=input$iv[j], ylab=input$dv, pch=16, col="black", cex=1) # 산점도 plot(x, y)
          abline(model, col="red") # 추세선
        })
      })
    }
        
        # 개별 산점도 출력
        plot_list <- lapply(1:length(input$iv), function(i) {
          plotname <- paste0("plot", i)
          plotOutput(plotname)
        })
      })
    })
  })
  
  # 실행
  shinyApp(ui, server)
}      










